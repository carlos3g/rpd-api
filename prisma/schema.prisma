generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DB_URL")
  relationMode = "foreignKeys"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                    BigInt                  @id @default(autoincrement()) @db.BigInt
  uuid                  String                  @unique
  name                  String
  email                 String                  @unique
  birthDate             DateTime                @map("birth_date")
  profession            String?
  password              String
  passwordChangeRequest PasswordChangeRequest[]
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  places                Place[]
  people                Person[]
  records               Record[]
  relationships         Relationship[]

  @@map("users")
}

enum RelationshipType {
  Father     @map("father")
  Mother     @map("mother")
  Boyfriend  @map("boyfriend")
  Girlfriend @map("girlfriend")

  @@map("relationship_type")
}

model Relationship {
  id        BigInt           @id @default(autoincrement()) @db.BigInt
  uuid      String           @unique
  type      RelationshipType
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt           @map("user_id")
  person    Person           @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  BigInt           @map("person_id")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  @@map("relationships")
}

model Record {
  id        BigInt    @id @default(autoincrement()) @db.BigInt
  uuid      String    @unique
  event     String
  thought   String
  behavior  String
  emotions  Emotion[]
  people    Person[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt    @map("user_id")
  place     Place     @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId   BigInt    @map("place_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("records")
}

model Emotion {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  uuid      String   @unique
  name      String
  records   Record[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("emotions")
}

model Person {
  id            BigInt         @id @default(autoincrement()) @db.BigInt
  uuid          String         @unique
  name          String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        BigInt         @map("user_id")
  relationships Relationship[]
  records       Record[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("people")
}

model Place {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  uuid      String   @unique
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt   @map("user_id")
  records   Record[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("places")
}

model PasswordChangeRequest {
  token     String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("password_change_request")
}
